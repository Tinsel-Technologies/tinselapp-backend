generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChatRoom {
  id           String   @id @default(cuid())
  participant1 String
  participant2 String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())
  updatedAt    DateTime @updatedAt

  messages Message[]

  @@unique([participant1, participant2])
  @@map("chat_rooms")
}

model Message {
  id          String      @id @default(cuid())
  chatRoomId  String
  senderId    String
  message     String
  messageType MessageType @default(TEXT)
  isEdited    Boolean     @default(false)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  editedAt    DateTime?
  updatedAt   DateTime    @updatedAt

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Payment {
  id                  String        @id @default(cuid())
  merchantRequestId   String?       @unique
  checkoutRequestId   String?       @unique
  amount              Float
  phoneNumber         String
  accountReference    String
  transactionDesc     String
  status              PaymentStatus @default(PENDING)
  responseCode        String?
  responseDescription String?
  customerMessage     String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  callback PaymentCallback?

  @@map("payments")
}

model PaymentCallback {
  id                 String   @id @default(cuid())
  paymentId          String   @unique
  merchantRequestId  String
  checkoutRequestId  String
  resultCode         Int
  resultDesc         String
  amount             Float?
  mpesaReceiptNumber String?
  transactionDate    String?
  phoneNumber        String?
  createdAt          DateTime @default(now())

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("payment_callbacks")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
