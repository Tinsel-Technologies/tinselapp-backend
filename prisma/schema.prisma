generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChatRoom {
  id           String    @id @default(cuid())
  participant1 String
  participant2 String
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  lastActivity DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  closedAt     DateTime?

  messages Message[]

  @@unique([participant1, participant2])
  @@map("chat_rooms")
}

model UserStatus {
  id        String   @id @default(cuid())
  userId    String   @unique
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_status")
}

model MessageReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  createdAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_read_receipts")
}

model Message {
  id          String      @id @default(cuid())
  chatRoomId  String
  senderId    String
  message     String
  fileUrl     String?
  messageType MessageType @default(TEXT)
  isEdited    Boolean     @default(false)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  editedAt    DateTime?
  updatedAt   DateTime    @updatedAt

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  repliedToId String?
  repliedTo   Message?  @relation("MessageReplies", fields: [repliedToId], references: [id], onDelete: NoAction)
  replies     Message[] @relation("MessageReplies")

  readReceipts  MessageReadReceipt[]
  contentCharge ContentCharge?

  @@map("messages")
}



model UserMonetizationSettings {
  id        String  @id @default(cuid())
  userId    String  @unique
  isEnabled Boolean @default(false)

  chatTimeTiers ChatTimeTier[]

  monetizeVoiceNotes Boolean @default(false)
  voiceNotePrice     Float   @default(0) 

  monetizeImages Boolean @default(false)
  imagePrice     Float   @default(0) 

  monetizeVideos Boolean @default(false)
  videoPrice     Float   @default(0) 

  currency  String   @default("KES")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_monetization_settings")
}

model ChatTimeTier {
  id         String @id @default(cuid())
  settingsId String

  durationMinutes Int 
  price           Float 

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  settings UserMonetizationSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)

  @@unique([settingsId, durationMinutes])
  @@index([settingsId])
  @@map("chat_time_tiers")
}

model ChatSession {
  id       String @id @default(cuid())
  buyerId  String
  sellerId String

  durationMinutes Int   
  price           Float
  currency        String @default("KES")

  startTime DateTime
  endTime   DateTime 

  usedMinutes    Float   @default(0) 
  isPaused       Boolean @default(false)
  lastActiveAt   DateTime? 
  pausedAt       DateTime? 
  resumedAt      DateTime? 

  isPaid Boolean   @default(false)
  paidAt DateTime?

  isActive    Boolean @default(true)
  isCancelled Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contentCharges ContentCharge[]

  @@index([buyerId, isActive])
  @@index([sellerId, isActive])
  @@index([buyerId, sellerId, isActive])
  @@map("chat_sessions")
}

model ContentCharge {
  id          String      @id @default(cuid())
  messageId   String      @unique
  sessionId   String 
  senderId    String
  recipientId String
  contentType MessageType

  basePrice   Float 
  units       Float 
  totalAmount Float 

  isPaid Boolean   @default(false)
  paidAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message Message     @relation(fields: [messageId], references: [id], onDelete: Cascade)
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([recipientId, isPaid])
  @@index([senderId, isPaid])
  @@index([sessionId])
  @@map("content_charges")
}

model UserBalance {
  id               String @id @default(cuid())
  userId           String @unique
  availableBalance Float  @default(0) 
  pendingBalance   Float  @default(0)
  totalEarnings    Float  @default(0)
  totalSpent       Float  @default(0) 

  currency    String   @default("KES")
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_balances")
}

model Payment {
  id                  String        @id @default(cuid())
  userId              String 
  merchantRequestId   String?       @unique
  checkoutRequestId   String?       @unique
  amount              Float
  phoneNumber         String
  accountReference    String
  transactionDesc     String
  status              PaymentStatus @default(PENDING)
  responseCode        String?
  responseDescription String?
  customerMessage     String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  callback PaymentCallback?

  @@index([userId]) 
  @@map("payments")
}

model PaymentCallback {
  id                 String   @id @default(cuid())
  paymentId          String   @unique
  merchantRequestId  String
  checkoutRequestId  String
  resultCode         Int
  resultDesc         String
  amount             Float?
  mpesaReceiptNumber String?
  transactionDate    String?
  phoneNumber        String?
  createdAt          DateTime @default(now())

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("payment_callbacks")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VIDEO
  AUDIO
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
